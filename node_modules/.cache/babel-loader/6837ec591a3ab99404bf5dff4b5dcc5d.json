{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _inherits = require(\"D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationError = void 0;\nexports.default = validateTimestamp;\n\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n\n  var _super = _createSuper(ValidationError);\n\n  function ValidationError(name, message) {\n    var _this;\n\n    _classCallCheck(this, ValidationError);\n\n    _this = _super.call(this, \"Invalid \\\"\".concat(name, \"\\\" provided, \") + message);\n    _this.name = 'ValidationError';\n    return _this;\n  }\n\n  return _createClass(ValidationError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, \"only numeric values are allowed for timestamps, provided type was \\\"\".concat(typeof timestamp, \"\\\"\"));\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be further in the future than expected maximum (\").concat(options.maximum, \")\"));\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be in the past, current time was \").concat(options.now));\n  }\n}","map":{"version":3,"sources":["D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/contentful/dist/es-modules/utils/validate-timestamp.js"],"names":["Object","defineProperty","exports","value","ValidationError","default","validateTimestamp","name","message","Error","timestamp","options","maximum","now"],"mappings":"AAAA;;;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;AACAF,OAAO,CAACG,OAAR,GAAkBC,iBAAlB;;IAEMF,e;;;;;AACJ,2BAAYG,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AAAA;;AACzB,8BAAM,oBAAYD,IAAZ,qBAAiCC,OAAvC;AACA,UAAKD,IAAL,GAAY,iBAAZ;AAFyB;AAG1B;;;iCAJ2BE,K;;AAQ9BP,OAAO,CAACE,eAAR,GAA0BA,eAA1B;;AAEA,SAASE,iBAAT,CAA2BC,IAA3B,EAAiCG,SAAjC,EAA4CC,OAA5C,EAAqD;AACnDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,UAAM,IAAIN,eAAJ,CAAoBG,IAApB,gFAAgG,OAAOG,SAAvG,QAAN;AACD;;AAED,MAAIC,OAAO,CAACC,OAAR,IAAmBF,SAAS,GAAGC,OAAO,CAACC,OAA3C,EAAoD;AAClD,UAAM,IAAIR,eAAJ,CAAoBG,IAApB,mBAAoCG,SAApC,sEAAyGC,OAAO,CAACC,OAAjH,OAAN;AACD;;AAED,MAAID,OAAO,CAACE,GAAR,IAAeH,SAAS,GAAGC,OAAO,CAACE,GAAvC,EAA4C;AAC1C,UAAM,IAAIT,eAAJ,CAAoBG,IAApB,mBAAoCG,SAApC,uDAA0FC,OAAO,CAACE,GAAlG,EAAN;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationError = void 0;\nexports.default = validateTimestamp;\n\nclass ValidationError extends Error {\n  constructor(name, message) {\n    super(`Invalid \"${name}\" provided, ` + message);\n    this.name = 'ValidationError';\n  }\n\n}\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, `only numeric values are allowed for timestamps, provided type was \"${typeof timestamp}\"`);\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be further in the future than expected maximum (${options.maximum})`);\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be in the past, current time was ${options.now}`);\n  }\n}"]},"metadata":{},"sourceType":"script"}