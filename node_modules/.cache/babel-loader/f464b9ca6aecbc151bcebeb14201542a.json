{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar FormData = require('form-data');\n\nvar _require = require('../helpers/constants'),\n    URI = _require.URI,\n    UPLOAD_API_URL = _require.UPLOAD_API_URL,\n    API_VERSION = _require.API_VERSION;\n\nvar HTTP_METHODS = require('../helpers/http_methods');\n\nvar _require2 = require('../helpers/request_handler'),\n    requestHandler = _require2.requestHandler;\n\nvar mediaMethods = function mediaMethods(bucket_config) {\n  return {\n    addMedia: function addMedia(params) {\n      var endpoint = \"\".concat(UPLOAD_API_URL, \"/\").concat(API_VERSION, \"/buckets/\").concat(bucket_config.slug, \"/media\");\n      var data = new FormData();\n\n      if (params.media.buffer) {\n        data.append('media', params.media.buffer, params.media.originalname);\n      } else {\n        data.append('media', params.media, params.media.name);\n      }\n\n      if (bucket_config.write_key) {\n        data.append('write_key', bucket_config.write_key);\n      }\n\n      if (params.folder) {\n        data.append('folder', params.folder);\n      }\n\n      if (params.metadata) {\n        data.append('metadata', JSON.stringify(params.metadata));\n      }\n\n      var getHeaders = function getHeaders(form) {\n        return new Promise(function (resolve, reject) {\n          if (params.media.buffer) {\n            form.getLength(function (err, length) {\n              if (err) reject(err);\n\n              var headers = _objectSpread({\n                'Content-Length': length\n              }, form.getHeaders());\n\n              resolve(headers);\n            });\n          } else {\n            resolve({\n              'Content-Type': 'multipart/form-data'\n            });\n          }\n        });\n      };\n\n      return getHeaders(data).then(function (headers) {\n        headers[\"Authorization\"] = \"Bearer \".concat(bucket_config.write_key);\n        return requestHandler(HTTP_METHODS.POST, endpoint, data, headers);\n      })[\"catch\"](function (error) {\n        throw error.response.data;\n      });\n    },\n    getMedia: function getMedia(params) {\n      var endpoint = \"\".concat(URI, \"/buckets/\").concat(bucket_config.slug, \"/media?read_key=\").concat(bucket_config.read_key);\n\n      if (params && params.limit) {\n        endpoint += \"&limit=\".concat(params.limit);\n      }\n\n      if (params && params.skip) {\n        endpoint += \"&skip=\".concat(params.skip);\n      }\n\n      if (params && params.query) {\n        endpoint += \"&query=\".concat(encodeURI(JSON.stringify(params.query)));\n      }\n\n      if (params && params.props) {\n        endpoint += \"&props=\".concat(params.props);\n      }\n\n      return requestHandler(HTTP_METHODS.GET, endpoint);\n    },\n    getSingleMedia: function getSingleMedia(params) {\n      var endpoint = \"\".concat(URI, \"/buckets/\").concat(bucket_config.slug, \"/media/\").concat(params.id, \"?read_key=\").concat(bucket_config.read_key);\n\n      if (params && params.props) {\n        endpoint += \"&props=\".concat(params.props);\n      }\n\n      return requestHandler(HTTP_METHODS.GET, endpoint);\n    },\n    deleteMedia: function deleteMedia(params) {\n      var endpoint = \"\".concat(URI, \"/buckets/\").concat(bucket_config.slug, \"/media/\").concat(params.id);\n      var headers;\n\n      if (bucket_config.write_key) {\n        headers = {\n          \"Authorization\": \"Bearer \".concat(bucket_config.write_key)\n        };\n      }\n\n      return requestHandler(HTTP_METHODS.DELETE, endpoint, null, headers);\n    }\n  };\n};\n\nmodule.exports = mediaMethods;","map":{"version":3,"mappings":"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","names":["FormData","require","URI","UPLOAD_API_URL","API_VERSION","HTTP_METHODS","requestHandler","mediaMethods","bucket_config","addMedia","params","endpoint","slug","data","media","buffer","append","originalname","name","write_key","folder","metadata","JSON","stringify","getHeaders","form","Promise","resolve","reject","getLength","err","length","headers","then","POST","error","response","getMedia","read_key","limit","skip","query","encodeURI","props","GET","getSingleMedia","id","deleteMedia","DELETE","module","exports"],"sources":["D:\\Users\\Ranyo7\\Programming\\Atom\\AcuteOwlStudio\\node_modules\\cosmicjs\\src\\bucket\\media.js"],"sourcesContent":["const FormData = require('form-data')\nconst { URI, UPLOAD_API_URL, API_VERSION } = require('../helpers/constants')\nconst HTTP_METHODS = require('../helpers/http_methods')\nconst { requestHandler } = require('../helpers/request_handler')\n\nconst mediaMethods = (bucket_config) => ({\n  addMedia: (params) => {\n    const endpoint = `${UPLOAD_API_URL}/${API_VERSION}/buckets/${bucket_config.slug}/media`\n    const data = new FormData()\n    if (params.media.buffer) {\n      data.append('media', params.media.buffer, params.media.originalname)\n    } else {\n      data.append('media', params.media, params.media.name)\n    }\n    if (bucket_config.write_key) {\n      data.append('write_key', bucket_config.write_key)\n    }\n    if (params.folder) {\n      data.append('folder', params.folder)\n    }\n    if (params.metadata) {\n      data.append('metadata', JSON.stringify(params.metadata))\n    }\n    const getHeaders = ((form) => new Promise((resolve, reject) => {\n      if (params.media.buffer) {\n        form.getLength((err, length) => {\n          if (err) reject(err)\n          const headers = { 'Content-Length': length, ...form.getHeaders() }\n          resolve(headers)\n        })\n      } else {\n        resolve({ 'Content-Type': 'multipart/form-data' })\n      }\n    })\n    )\n    return getHeaders(data)\n      .then((headers) => {\n        headers[\"Authorization\"] = `Bearer ${bucket_config.write_key}`;\n        return requestHandler(HTTP_METHODS.POST, endpoint, data, headers)\n      }).catch((error) => {\n          throw error.response.data\n      })\n  },\n  getMedia: (params) => {\n    let endpoint = `${URI}/buckets/${bucket_config.slug}/media?read_key=${bucket_config.read_key}`\n    if (params && params.limit) {\n      endpoint += `&limit=${params.limit}`\n    }\n    if (params && params.skip) {\n      endpoint += `&skip=${params.skip}`\n    }\n    if (params && params.query) {\n      endpoint += `&query=${encodeURI(JSON.stringify(params.query))}`\n    }\n    if (params && params.props) {\n      endpoint += `&props=${params.props}`\n    }\n    return requestHandler(HTTP_METHODS.GET, endpoint)\n  },\n  getSingleMedia: (params) => {\n    let endpoint = `${URI}/buckets/${bucket_config.slug}/media/${params.id}?read_key=${bucket_config.read_key}`\n    if (params && params.props) {\n      endpoint += `&props=${params.props}`\n    }\n    return requestHandler(HTTP_METHODS.GET, endpoint)\n  },\n  deleteMedia: (params) => {\n    const endpoint = `${URI}/buckets/${bucket_config.slug}/media/${params.id}`\n    let headers;\n    if (bucket_config.write_key) {\n      headers = {\n        \"Authorization\": `Bearer ${bucket_config.write_key}`\n      }\n    }\n    return requestHandler(HTTP_METHODS.DELETE, endpoint, null, headers)\n  }\n})\n\nmodule.exports = mediaMethods\n"]},"metadata":{},"sourceType":"script"}