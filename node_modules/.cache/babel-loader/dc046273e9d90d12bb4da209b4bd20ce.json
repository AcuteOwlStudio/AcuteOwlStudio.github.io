{"ast":null,"code":"/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\nvar ApiClient = require('../ApiClient');\n/**\n * Ecommerce service.\n * @module api/EcommerceApi\n */\n\n/**\n * Constructs a new EcommerceApi. \n * @alias module:api/EcommerceApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\n\n\nmodule.exports = function (apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n\n  this.deleteStoreWithHttpInfo = function (storeId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n\n\n  this.deleteStore = function (storeId) {\n    return this.deleteStoreWithHttpInfo(storeId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteStoreCartWithHttpInfo = function (storeId, cartId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteStoreCart = function (storeId, cartId) {\n    return this.deleteStoreCartWithHttpInfo(storeId, cartId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteCartLineItemWithHttpInfo = function (storeId, cartId, lineId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    } // verify the required parameter 'lineId' is set\n\n\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteCartLineItem = function (storeId, cartId, lineId) {\n    return this.deleteCartLineItemWithHttpInfo(storeId, cartId, lineId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteStoreCustomerWithHttpInfo = function (storeId, customerId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'customerId' is set\n\n\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/customers/{customer_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteStoreCustomer = function (storeId, customerId) {\n    return this.deleteStoreCustomerWithHttpInfo(storeId, customerId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteOrderWithHttpInfo = function (storeId, orderId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteOrder = function (storeId, orderId) {\n    return this.deleteOrderWithHttpInfo(storeId, orderId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteOrderLineItemWithHttpInfo = function (storeId, orderId, lineId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    } // verify the required parameter 'lineId' is set\n\n\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteOrderLineItem = function (storeId, orderId, lineId) {\n    return this.deleteOrderLineItemWithHttpInfo(storeId, orderId, lineId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteStoreProductWithHttpInfo = function (storeId, productId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteStoreProduct = function (storeId, productId) {\n    return this.deleteStoreProductWithHttpInfo(storeId, productId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteProductImageWithHttpInfo = function (storeId, productId, imageId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'imageId' is set\n\n\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteProductImage = function (storeId, productId, imageId) {\n    return this.deleteProductImageWithHttpInfo(storeId, productId, imageId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deleteProductVariantWithHttpInfo = function (storeId, productId, variantId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'variantId' is set\n\n\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteProductVariant = function (storeId, productId, variantId) {\n    return this.deleteProductVariantWithHttpInfo(storeId, productId, variantId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deletePromoCodeWithHttpInfo = function (storeId, promoRuleId, promoCodeId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'promoRuleId' is set\n\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    } // verify the required parameter 'promoCodeId' is set\n\n\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deletePromoCode = function (storeId, promoRuleId, promoCodeId) {\n    return this.deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.deletePromoRuleWithHttpInfo = function (storeId, promoRuleId) {\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'promoRuleId' is set\n\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deletePromoRule = function (storeId, promoRuleId) {\n    return this.deletePromoRuleWithHttpInfo(storeId, promoRuleId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders} and HTTP response\n   */\n\n\n  this.ordersWithHttpInfo = function (opts) {\n    opts = opts || {};\n    var postBody = null;\n    var pathParams = {};\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'campaign_id': opts['campaignId'],\n      'outreach_id': opts['outreachId'],\n      'customer_id': opts['customerId'],\n      'has_outreach': opts['hasOutreach']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/orders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders}\n   */\n\n\n  this.orders = function (opts) {\n    return this.ordersWithHttpInfo(opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStores} and HTTP response\n   */\n\n\n  this.storesWithHttpInfo = function (opts) {\n    opts = opts || {};\n    var postBody = null;\n    var pathParams = {};\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStores}\n   */\n\n\n  this.stores = function (opts) {\n    return this.storesWithHttpInfo(opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n\n\n  this.getStoreWithHttpInfo = function (storeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n\n\n  this.getStore = function (storeId, opts) {\n    return this.getStoreWithHttpInfo(storeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Carts} and HTTP response\n   */\n\n\n  this.getStoreCartsWithHttpInfo = function (storeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Carts}\n   */\n\n\n  this.getStoreCarts = function (storeId, opts) {\n    return this.getStoreCartsWithHttpInfo(storeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n\n\n  this.getStoreCartWithHttpInfo = function (storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n\n\n  this.getStoreCart = function (storeId, cartId, opts) {\n    return this.getStoreCartWithHttpInfo(storeId, cartId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartLines} and HTTP response\n   */\n\n\n  this.getAllCartLineItemsWithHttpInfo = function (storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartLines}\n   */\n\n\n  this.getAllCartLineItems = function (storeId, cartId, opts) {\n    return this.getAllCartLineItemsWithHttpInfo(storeId, cartId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n\n\n  this.getCartLineItemWithHttpInfo = function (storeId, cartId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    } // verify the required parameter 'lineId' is set\n\n\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n\n\n  this.getCartLineItem = function (storeId, cartId, lineId, opts) {\n    return this.getCartLineItemWithHttpInfo(storeId, cartId, lineId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customers} and HTTP response\n   */\n\n\n  this.getAllStoreCustomersWithHttpInfo = function (storeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'email_address': opts['emailAddress']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/customers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customers}\n   */\n\n\n  this.getAllStoreCustomers = function (storeId, opts) {\n    return this.getAllStoreCustomersWithHttpInfo(storeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n\n\n  this.getStoreCustomerWithHttpInfo = function (storeId, customerId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'customerId' is set\n\n\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/customers/{customer_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n\n\n  this.getStoreCustomer = function (storeId, customerId, opts) {\n    return this.getStoreCustomerWithHttpInfo(storeId, customerId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders1} and HTTP response\n   */\n\n\n  this.getStoreOrdersWithHttpInfo = function (storeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'customer_id': opts['customerId'],\n      'has_outreach': opts['hasOutreach'],\n      'campaign_id': opts['campaignId'],\n      'outreach_id': opts['outreachId']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders1}\n   */\n\n\n  this.getStoreOrders = function (storeId, opts) {\n    return this.getStoreOrdersWithHttpInfo(storeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n\n\n  this.getOrderWithHttpInfo = function (storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n\n\n  this.getOrder = function (storeId, orderId, opts) {\n    return this.getOrderWithHttpInfo(storeId, orderId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLines} and HTTP response\n   */\n\n\n  this.getAllOrderLineItemsWithHttpInfo = function (storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLines}\n   */\n\n\n  this.getAllOrderLineItems = function (storeId, orderId, opts) {\n    return this.getAllOrderLineItemsWithHttpInfo(storeId, orderId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n\n\n  this.getOrderLineItemWithHttpInfo = function (storeId, orderId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    } // verify the required parameter 'lineId' is set\n\n\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n\n\n  this.getOrderLineItem = function (storeId, orderId, lineId, opts) {\n    return this.getOrderLineItemWithHttpInfo(storeId, orderId, lineId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Products} and HTTP response\n   */\n\n\n  this.getAllStoreProductsWithHttpInfo = function (storeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Products}\n   */\n\n\n  this.getAllStoreProducts = function (storeId, opts) {\n    return this.getAllStoreProductsWithHttpInfo(storeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n\n\n  this.getStoreProductWithHttpInfo = function (storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n\n\n  this.getStoreProduct = function (storeId, productId, opts) {\n    return this.getStoreProductWithHttpInfo(storeId, productId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImages} and HTTP response\n   */\n\n\n  this.getProductImagesWithHttpInfo = function (storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/images', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImages}\n   */\n\n\n  this.getProductImages = function (storeId, productId, opts) {\n    return this.getProductImagesWithHttpInfo(storeId, productId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n\n\n  this.getProductImageWithHttpInfo = function (storeId, productId, imageId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'imageId' is set\n\n\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n\n\n  this.getProductImage = function (storeId, productId, imageId, opts) {\n    return this.getProductImageWithHttpInfo(storeId, productId, imageId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariants} and HTTP response\n   */\n\n\n  this.getProductVariantsWithHttpInfo = function (storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/variants', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariants}\n   */\n\n\n  this.getProductVariants = function (storeId, productId, opts) {\n    return this.getProductVariantsWithHttpInfo(storeId, productId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n\n\n  this.getProductVariantWithHttpInfo = function (storeId, productId, variantId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'variantId' is set\n\n\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n\n\n  this.getProductVariant = function (storeId, productId, variantId, opts) {\n    return this.getProductVariantWithHttpInfo(storeId, productId, variantId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoCodes} and HTTP response\n   */\n\n\n  this.getPromoCodesWithHttpInfo = function (promoRuleId, storeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'promoRuleId' is set\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    } // verify the required parameter 'storeId' is set\n\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'promo_rule_id': promoRuleId,\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoCodes}\n   */\n\n\n  this.getPromoCodes = function (promoRuleId, storeId, opts) {\n    return this.getPromoCodesWithHttpInfo(promoRuleId, storeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n\n\n  this.getPromoCodeWithHttpInfo = function (storeId, promoRuleId, promoCodeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'promoRuleId' is set\n\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    } // verify the required parameter 'promoCodeId' is set\n\n\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n\n\n  this.getPromoCode = function (storeId, promoRuleId, promoCodeId, opts) {\n    return this.getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoRules} and HTTP response\n   */\n\n\n  this.listPromoRulesWithHttpInfo = function (storeId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoRules}\n   */\n\n\n  this.listPromoRules = function (storeId, opts) {\n    return this.listPromoRulesWithHttpInfo(storeId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n\n\n  this.getPromoRuleWithHttpInfo = function (storeId, promoRuleId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'promoRuleId' is set\n\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n\n\n  this.getPromoRule = function (storeId, promoRuleId, opts) {\n    return this.getPromoRuleWithHttpInfo(storeId, promoRuleId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n\n\n  this.updateStoreWithHttpInfo = function (storeId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n\n\n  this.updateStore = function (storeId, body) {\n    return this.updateStoreWithHttpInfo(storeId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n\n\n  this.updateStoreCartWithHttpInfo = function (storeId, cartId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n\n\n  this.updateStoreCart = function (storeId, cartId, body) {\n    return this.updateStoreCartWithHttpInfo(storeId, cartId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n\n\n  this.updateCartLineItemWithHttpInfo = function (storeId, cartId, lineId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    } // verify the required parameter 'lineId' is set\n\n\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n\n\n  this.updateCartLineItem = function (storeId, cartId, lineId, body) {\n    return this.updateCartLineItemWithHttpInfo(storeId, cartId, lineId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n\n\n  this.updateStoreCustomerWithHttpInfo = function (storeId, customerId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'customerId' is set\n\n\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/customers/{customer_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n\n\n  this.updateStoreCustomer = function (storeId, customerId, body) {\n    return this.updateStoreCustomerWithHttpInfo(storeId, customerId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n\n\n  this.updateOrderWithHttpInfo = function (storeId, orderId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n\n\n  this.updateOrder = function (storeId, orderId, body) {\n    return this.updateOrderWithHttpInfo(storeId, orderId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n\n\n  this.updateOrderLineItemWithHttpInfo = function (storeId, orderId, lineId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    } // verify the required parameter 'lineId' is set\n\n\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n\n\n  this.updateOrderLineItem = function (storeId, orderId, lineId, body) {\n    return this.updateOrderLineItemWithHttpInfo(storeId, orderId, lineId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n\n\n  this.updateStoreProductWithHttpInfo = function (storeId, productId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n\n\n  this.updateStoreProduct = function (storeId, productId, body) {\n    return this.updateStoreProductWithHttpInfo(storeId, productId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n\n\n  this.updateProductImageWithHttpInfo = function (storeId, productId, imageId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'imageId' is set\n\n\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n\n\n  this.updateProductImage = function (storeId, productId, imageId, body) {\n    return this.updateProductImageWithHttpInfo(storeId, productId, imageId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n\n\n  this.updateProductVariantWithHttpInfo = function (storeId, productId, variantId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'variantId' is set\n\n\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n\n\n  this.updateProductVariant = function (storeId, productId, variantId, body) {\n    return this.updateProductVariantWithHttpInfo(storeId, productId, variantId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n\n\n  this.updatePromoCodeWithHttpInfo = function (storeId, promoRuleId, promoCodeId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'promoRuleId' is set\n\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    } // verify the required parameter 'promoCodeId' is set\n\n\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n\n\n  this.updatePromoCode = function (storeId, promoRuleId, promoCodeId, body) {\n    return this.updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n\n\n  this.updatePromoRuleWithHttpInfo = function (storeId, promoRuleId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'promoRuleId' is set\n\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n\n\n  this.updatePromoRule = function (storeId, promoRuleId, body) {\n    return this.updatePromoRuleWithHttpInfo(storeId, promoRuleId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n\n\n  this.addStoreWithHttpInfo = function (body) {\n    var postBody = body; // verify the required parameter 'body' is set\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {};\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n\n\n  this.addStore = function (body) {\n    return this.addStoreWithHttpInfo(body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n\n\n  this.addStoreCartWithHttpInfo = function (storeId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n\n\n  this.addStoreCart = function (storeId, body) {\n    return this.addStoreCartWithHttpInfo(storeId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n\n\n  this.addCartLineItemWithHttpInfo = function (storeId, cartId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'cartId' is set\n\n\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n\n\n  this.addCartLineItem = function (storeId, cartId, body) {\n    return this.addCartLineItemWithHttpInfo(storeId, cartId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n\n\n  this.addStoreCustomerWithHttpInfo = function (storeId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/customers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n\n\n  this.addStoreCustomer = function (storeId, body) {\n    return this.addStoreCustomerWithHttpInfo(storeId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n\n\n  this.addStoreOrderWithHttpInfo = function (storeId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n\n\n  this.addStoreOrder = function (storeId, body) {\n    return this.addStoreOrderWithHttpInfo(storeId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n\n\n  this.addOrderLineItemWithHttpInfo = function (storeId, orderId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'orderId' is set\n\n\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n\n\n  this.addOrderLineItem = function (storeId, orderId, body) {\n    return this.addOrderLineItemWithHttpInfo(storeId, orderId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n\n\n  this.addStoreProductWithHttpInfo = function (storeId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n\n\n  this.addStoreProduct = function (storeId, body) {\n    return this.addStoreProductWithHttpInfo(storeId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n\n\n  this.addProductImageWithHttpInfo = function (storeId, productId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/images', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n\n\n  this.addProductImage = function (storeId, productId, body) {\n    return this.addProductImageWithHttpInfo(storeId, productId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n\n\n  this.addProductVariantsWithHttpInfo = function (storeId, productId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/variants', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n\n\n  this.addProductVariants = function (storeId, productId, body) {\n    return this.addProductVariantsWithHttpInfo(storeId, productId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n\n\n  this.addPromoCodeWithHttpInfo = function (storeId, promoRuleId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'promoRuleId' is set\n\n\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n\n\n  this.addPromoCode = function (storeId, promoRuleId, body) {\n    return this.addPromoCodeWithHttpInfo(storeId, promoRuleId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n\n\n  this.addPromoRulesWithHttpInfo = function (storeId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/promo-rules', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n\n\n  this.addPromoRules = function (storeId, body) {\n    return this.addPromoRulesWithHttpInfo(storeId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n\n\n  this.setStoreCustomerWithHttpInfo = function (storeId, customerId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'customerId' is set\n\n\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/customers/{customer_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n\n\n  this.setStoreCustomer = function (storeId, customerId, body) {\n    return this.setStoreCustomerWithHttpInfo(storeId, customerId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n\n\n  this.addProductVariantWithHttpInfo = function (storeId, productId, variantId, body) {\n    var postBody = body; // verify the required parameter 'storeId' is set\n\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    } // verify the required parameter 'productId' is set\n\n\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    } // verify the required parameter 'variantId' is set\n\n\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n\n\n  this.addProductVariant = function (storeId, productId, variantId, body) {\n    return this.addProductVariantWithHttpInfo(storeId, productId, variantId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n};","map":{"version":3,"sources":["D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js"],"names":["ApiClient","require","module","exports","apiClient","instance","deleteStoreWithHttpInfo","storeId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","deleteStore","then","response_and_data","data","deleteStoreCartWithHttpInfo","cartId","deleteStoreCart","deleteCartLineItemWithHttpInfo","lineId","deleteCartLineItem","deleteStoreCustomerWithHttpInfo","customerId","deleteStoreCustomer","deleteOrderWithHttpInfo","orderId","deleteOrder","deleteOrderLineItemWithHttpInfo","deleteOrderLineItem","deleteStoreProductWithHttpInfo","productId","deleteStoreProduct","deleteProductImageWithHttpInfo","imageId","deleteProductImage","deleteProductVariantWithHttpInfo","variantId","deleteProductVariant","deletePromoCodeWithHttpInfo","promoRuleId","promoCodeId","deletePromoCode","deletePromoRuleWithHttpInfo","deletePromoRule","ordersWithHttpInfo","opts","buildCollectionParam","orders","storesWithHttpInfo","stores","getStoreWithHttpInfo","getStore","getStoreCartsWithHttpInfo","getStoreCarts","getStoreCartWithHttpInfo","getStoreCart","getAllCartLineItemsWithHttpInfo","getAllCartLineItems","getCartLineItemWithHttpInfo","getCartLineItem","getAllStoreCustomersWithHttpInfo","getAllStoreCustomers","getStoreCustomerWithHttpInfo","getStoreCustomer","getStoreOrdersWithHttpInfo","getStoreOrders","getOrderWithHttpInfo","getOrder","getAllOrderLineItemsWithHttpInfo","getAllOrderLineItems","getOrderLineItemWithHttpInfo","getOrderLineItem","getAllStoreProductsWithHttpInfo","getAllStoreProducts","getStoreProductWithHttpInfo","getStoreProduct","getProductImagesWithHttpInfo","getProductImages","getProductImageWithHttpInfo","getProductImage","getProductVariantsWithHttpInfo","getProductVariants","getProductVariantWithHttpInfo","getProductVariant","getPromoCodesWithHttpInfo","getPromoCodes","getPromoCodeWithHttpInfo","getPromoCode","listPromoRulesWithHttpInfo","listPromoRules","getPromoRuleWithHttpInfo","getPromoRule","updateStoreWithHttpInfo","body","updateStore","updateStoreCartWithHttpInfo","updateStoreCart","updateCartLineItemWithHttpInfo","updateCartLineItem","updateStoreCustomerWithHttpInfo","updateStoreCustomer","updateOrderWithHttpInfo","updateOrder","updateOrderLineItemWithHttpInfo","updateOrderLineItem","updateStoreProductWithHttpInfo","updateStoreProduct","updateProductImageWithHttpInfo","updateProductImage","updateProductVariantWithHttpInfo","updateProductVariant","updatePromoCodeWithHttpInfo","updatePromoCode","updatePromoRuleWithHttpInfo","updatePromoRule","addStoreWithHttpInfo","addStore","addStoreCartWithHttpInfo","addStoreCart","addCartLineItemWithHttpInfo","addCartLineItem","addStoreCustomerWithHttpInfo","addStoreCustomer","addStoreOrderWithHttpInfo","addStoreOrder","addOrderLineItemWithHttpInfo","addOrderLineItem","addStoreProductWithHttpInfo","addStoreProduct","addProductImageWithHttpInfo","addProductImage","addProductVariantsWithHttpInfo","addProductVariants","addPromoCodeWithHttpInfo","addPromoCode","addPromoRulesWithHttpInfo","addPromoRules","setStoreCustomerWithHttpInfo","setStoreCustomer","addProductVariantWithHttpInfo","addProductVariant"],"mappings":"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","sourcesContent":["/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Ecommerce service.\n * @module api/EcommerceApi\n */\n\n/**\n * Constructs a new EcommerceApi. \n * @alias module:api/EcommerceApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n  this.deleteStoreWithHttpInfo = function(storeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n  this.deleteStore = function(storeId) {\n    return this.deleteStoreWithHttpInfo(storeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCartWithHttpInfo = function(storeId, cartId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCart = function(storeId, cartId) {\n    return this.deleteStoreCartWithHttpInfo(storeId, cartId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteCartLineItemWithHttpInfo = function(storeId, cartId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteCartLineItem = function(storeId, cartId, lineId) {\n    return this.deleteCartLineItemWithHttpInfo(storeId, cartId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCustomerWithHttpInfo = function(storeId, customerId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCustomer = function(storeId, customerId) {\n    return this.deleteStoreCustomerWithHttpInfo(storeId, customerId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderWithHttpInfo = function(storeId, orderId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrder = function(storeId, orderId) {\n    return this.deleteOrderWithHttpInfo(storeId, orderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderLineItemWithHttpInfo = function(storeId, orderId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrderLineItem = function(storeId, orderId, lineId) {\n    return this.deleteOrderLineItemWithHttpInfo(storeId, orderId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreProductWithHttpInfo = function(storeId, productId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreProduct = function(storeId, productId) {\n    return this.deleteStoreProductWithHttpInfo(storeId, productId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductImageWithHttpInfo = function(storeId, productId, imageId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductImage = function(storeId, productId, imageId) {\n    return this.deleteProductImageWithHttpInfo(storeId, productId, imageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductVariantWithHttpInfo = function(storeId, productId, variantId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductVariant = function(storeId, productId, variantId) {\n    return this.deleteProductVariantWithHttpInfo(storeId, productId, variantId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoCode = function(storeId, promoRuleId, promoCodeId) {\n    return this.deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoRuleWithHttpInfo = function(storeId, promoRuleId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoRule = function(storeId, promoRuleId) {\n    return this.deletePromoRuleWithHttpInfo(storeId, promoRuleId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders} and HTTP response\n   */\n  this.ordersWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'campaign_id': opts['campaignId'],\n      'outreach_id': opts['outreachId'],\n      'customer_id': opts['customerId'],\n      'has_outreach': opts['hasOutreach']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders}\n   */\n  this.orders = function(opts) {\n    return this.ordersWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStores} and HTTP response\n   */\n  this.storesWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStores}\n   */\n  this.stores = function(opts) {\n    return this.storesWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.getStoreWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.getStore = function(storeId, opts) {\n    return this.getStoreWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Carts} and HTTP response\n   */\n  this.getStoreCartsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Carts}\n   */\n  this.getStoreCarts = function(storeId, opts) {\n    return this.getStoreCartsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.getStoreCartWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.getStoreCart = function(storeId, cartId, opts) {\n    return this.getStoreCartWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartLines} and HTTP response\n   */\n  this.getAllCartLineItemsWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartLines}\n   */\n  this.getAllCartLineItems = function(storeId, cartId, opts) {\n    return this.getAllCartLineItemsWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.getCartLineItemWithHttpInfo = function(storeId, cartId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.getCartLineItem = function(storeId, cartId, lineId, opts) {\n    return this.getCartLineItemWithHttpInfo(storeId, cartId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customers} and HTTP response\n   */\n  this.getAllStoreCustomersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'email_address': opts['emailAddress']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customers}\n   */\n  this.getAllStoreCustomers = function(storeId, opts) {\n    return this.getAllStoreCustomersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.getStoreCustomerWithHttpInfo = function(storeId, customerId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.getStoreCustomer = function(storeId, customerId, opts) {\n    return this.getStoreCustomerWithHttpInfo(storeId, customerId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders1} and HTTP response\n   */\n  this.getStoreOrdersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'customer_id': opts['customerId'],\n      'has_outreach': opts['hasOutreach'],\n      'campaign_id': opts['campaignId'],\n      'outreach_id': opts['outreachId']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders1}\n   */\n  this.getStoreOrders = function(storeId, opts) {\n    return this.getStoreOrdersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.getOrderWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.getOrder = function(storeId, orderId, opts) {\n    return this.getOrderWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLines} and HTTP response\n   */\n  this.getAllOrderLineItemsWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLines}\n   */\n  this.getAllOrderLineItems = function(storeId, orderId, opts) {\n    return this.getAllOrderLineItemsWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.getOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.getOrderLineItem = function(storeId, orderId, lineId, opts) {\n    return this.getOrderLineItemWithHttpInfo(storeId, orderId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Products} and HTTP response\n   */\n  this.getAllStoreProductsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Products}\n   */\n  this.getAllStoreProducts = function(storeId, opts) {\n    return this.getAllStoreProductsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.getStoreProductWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.getStoreProduct = function(storeId, productId, opts) {\n    return this.getStoreProductWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImages} and HTTP response\n   */\n  this.getProductImagesWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImages}\n   */\n  this.getProductImages = function(storeId, productId, opts) {\n    return this.getProductImagesWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.getProductImageWithHttpInfo = function(storeId, productId, imageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.getProductImage = function(storeId, productId, imageId, opts) {\n    return this.getProductImageWithHttpInfo(storeId, productId, imageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariants} and HTTP response\n   */\n  this.getProductVariantsWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariants}\n   */\n  this.getProductVariants = function(storeId, productId, opts) {\n    return this.getProductVariantsWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.getProductVariantWithHttpInfo = function(storeId, productId, variantId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.getProductVariant = function(storeId, productId, variantId, opts) {\n    return this.getProductVariantWithHttpInfo(storeId, productId, variantId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoCodes} and HTTP response\n   */\n  this.getPromoCodesWithHttpInfo = function(promoRuleId, storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'promo_rule_id': promoRuleId,\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoCodes}\n   */\n  this.getPromoCodes = function(promoRuleId, storeId, opts) {\n    return this.getPromoCodesWithHttpInfo(promoRuleId, storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.getPromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.getPromoCode = function(storeId, promoRuleId, promoCodeId, opts) {\n    return this.getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoRules} and HTTP response\n   */\n  this.listPromoRulesWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoRules}\n   */\n  this.listPromoRules = function(storeId, opts) {\n    return this.listPromoRulesWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.getPromoRuleWithHttpInfo = function(storeId, promoRuleId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.getPromoRule = function(storeId, promoRuleId, opts) {\n    return this.getPromoRuleWithHttpInfo(storeId, promoRuleId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.updateStoreWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.updateStore = function(storeId, body) {\n    return this.updateStoreWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.updateStoreCartWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.updateStoreCart = function(storeId, cartId, body) {\n    return this.updateStoreCartWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.updateCartLineItemWithHttpInfo = function(storeId, cartId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.updateCartLineItem = function(storeId, cartId, lineId, body) {\n    return this.updateCartLineItemWithHttpInfo(storeId, cartId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.updateStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.updateStoreCustomer = function(storeId, customerId, body) {\n    return this.updateStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.updateOrderWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.updateOrder = function(storeId, orderId, body) {\n    return this.updateOrderWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.updateOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.updateOrderLineItem = function(storeId, orderId, lineId, body) {\n    return this.updateOrderLineItemWithHttpInfo(storeId, orderId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.updateStoreProductWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.updateStoreProduct = function(storeId, productId, body) {\n    return this.updateStoreProductWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.updateProductImageWithHttpInfo = function(storeId, productId, imageId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.updateProductImage = function(storeId, productId, imageId, body) {\n    return this.updateProductImageWithHttpInfo(storeId, productId, imageId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.updateProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.updateProductVariant = function(storeId, productId, variantId, body) {\n    return this.updateProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.updatePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.updatePromoCode = function(storeId, promoRuleId, promoCodeId, body) {\n    return this.updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.updatePromoRuleWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.updatePromoRule = function(storeId, promoRuleId, body) {\n    return this.updatePromoRuleWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.addStoreWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.addStore = function(body) {\n    return this.addStoreWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.addStoreCartWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.addStoreCart = function(storeId, body) {\n    return this.addStoreCartWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.addCartLineItemWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.addCartLineItem = function(storeId, cartId, body) {\n    return this.addCartLineItemWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.addStoreCustomerWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.addStoreCustomer = function(storeId, body) {\n    return this.addStoreCustomerWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.addStoreOrderWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.addStoreOrder = function(storeId, body) {\n    return this.addStoreOrderWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.addOrderLineItemWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.addOrderLineItem = function(storeId, orderId, body) {\n    return this.addOrderLineItemWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.addStoreProductWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.addStoreProduct = function(storeId, body) {\n    return this.addStoreProductWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.addProductImageWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.addProductImage = function(storeId, productId, body) {\n    return this.addProductImageWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantsWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariants = function(storeId, productId, body) {\n    return this.addProductVariantsWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.addPromoCodeWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.addPromoCode = function(storeId, promoRuleId, body) {\n    return this.addPromoCodeWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.addPromoRulesWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.addPromoRules = function(storeId, body) {\n    return this.addPromoRulesWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.setStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.setStoreCustomer = function(storeId, customerId, body) {\n    return this.setStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariant = function(storeId, productId, variantId, body) {\n    return this.addProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}