{"ast":null,"code":"/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\nvar ApiClient = require('../ApiClient');\n/**\n * Templates service.\n * @module api/TemplatesApi\n */\n\n/**\n * Constructs a new TemplatesApi. \n * @alias module:api/TemplatesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\n\n\nmodule.exports = function (apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n  this.deleteTemplateWithHttpInfo = function (templateId) {\n    var postBody = null; // verify the required parameter 'templateId' is set\n\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/templates/{template_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.deleteTemplate = function (templateId) {\n    return this.deleteTemplateWithHttpInfo(templateId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Templates} and HTTP response\n   */\n\n\n  this.listWithHttpInfo = function (opts) {\n    opts = opts || {};\n    var postBody = null;\n    var pathParams = {};\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'created_by': opts['createdBy'],\n      'since_date_created': opts['sinceDateCreated'],\n      'before_date_created': opts['beforeDateCreated'],\n      'type': opts['type'],\n      'category': opts['category'],\n      'folder_id': opts['folderId'],\n      'sort_field': opts['sortField'],\n      'sort_dir': opts['sortDir']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/templates', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Templates}\n   */\n\n\n  this.list = function (opts) {\n    return this.listWithHttpInfo(opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n\n\n  this.getTemplateWithHttpInfo = function (templateId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'templateId' is set\n\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/templates/{template_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n\n\n  this.getTemplate = function (templateId, opts) {\n    return this.getTemplateWithHttpInfo(templateId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateDefaultContent} and HTTP response\n   */\n\n\n  this.getDefaultContentForTemplateWithHttpInfo = function (templateId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'templateId' is set\n\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/templates/{template_id}/default-content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateDefaultContent}\n   */\n\n\n  this.getDefaultContentForTemplate = function (templateId, opts) {\n    return this.getDefaultContentForTemplateWithHttpInfo(templateId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n\n\n  this.updateTemplateWithHttpInfo = function (templateId, body) {\n    var postBody = body; // verify the required parameter 'templateId' is set\n\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/templates/{template_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n\n\n  this.updateTemplate = function (templateId, body) {\n    return this.updateTemplateWithHttpInfo(templateId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n\n\n  this.createWithHttpInfo = function (body) {\n    var postBody = body; // verify the required parameter 'body' is set\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {};\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/templates', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n\n\n  this.create = function (body) {\n    return this.createWithHttpInfo(body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n};","map":{"version":3,"sources":["D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js"],"names":["ApiClient","require","module","exports","apiClient","instance","deleteTemplateWithHttpInfo","templateId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","deleteTemplate","then","response_and_data","data","listWithHttpInfo","opts","buildCollectionParam","list","getTemplateWithHttpInfo","getTemplate","getDefaultContentForTemplateWithHttpInfo","getDefaultContentForTemplate","updateTemplateWithHttpInfo","body","updateTemplate","createWithHttpInfo","create"],"mappings":"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","sourcesContent":["/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * Templates service.\n * @module api/TemplatesApi\n */\n\n/**\n * Constructs a new TemplatesApi. \n * @alias module:api/TemplatesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteTemplateWithHttpInfo = function(templateId) {\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteTemplate = function(templateId) {\n    return this.deleteTemplateWithHttpInfo(templateId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Templates} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset'],\n      'created_by': opts['createdBy'],\n      'since_date_created': opts['sinceDateCreated'],\n      'before_date_created': opts['beforeDateCreated'],\n      'type': opts['type'],\n      'category': opts['category'],\n      'folder_id': opts['folderId'],\n      'sort_field': opts['sortField'],\n      'sort_dir': opts['sortDir']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Templates}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.getTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.getTemplate = function(templateId, opts) {\n    return this.getTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateDefaultContent} and HTTP response\n   */\n  this.getDefaultContentForTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}/default-content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateDefaultContent}\n   */\n  this.getDefaultContentForTemplate = function(templateId, opts) {\n    return this.getDefaultContentForTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.updateTemplateWithHttpInfo = function(templateId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.updateTemplate = function(templateId, body) {\n    return this.updateTemplateWithHttpInfo(templateId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}