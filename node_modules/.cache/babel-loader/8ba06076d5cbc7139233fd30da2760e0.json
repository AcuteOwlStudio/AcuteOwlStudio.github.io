{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.V1_NODE_TYPES = exports.TEXT_CONTAINERS = exports.HEADINGS = exports.CONTAINERS = exports.VOID_BLOCKS = exports.TABLE_BLOCKS = exports.LIST_ITEM_BLOCKS = exports.TOP_LEVEL_BLOCKS = void 0;\n\nvar blocks_1 = require(\"./blocks\");\n\nvar inlines_1 = require(\"./inlines\");\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\n\n\nexports.TOP_LEVEL_BLOCKS = [blocks_1.BLOCKS.PARAGRAPH, blocks_1.BLOCKS.HEADING_1, blocks_1.BLOCKS.HEADING_2, blocks_1.BLOCKS.HEADING_3, blocks_1.BLOCKS.HEADING_4, blocks_1.BLOCKS.HEADING_5, blocks_1.BLOCKS.HEADING_6, blocks_1.BLOCKS.OL_LIST, blocks_1.BLOCKS.UL_LIST, blocks_1.BLOCKS.HR, blocks_1.BLOCKS.QUOTE, blocks_1.BLOCKS.EMBEDDED_ENTRY, blocks_1.BLOCKS.EMBEDDED_ASSET, blocks_1.BLOCKS.TABLE];\n/**\n * Array of all allowed block types inside list items\n */\n\nexports.LIST_ITEM_BLOCKS = [blocks_1.BLOCKS.PARAGRAPH, blocks_1.BLOCKS.HEADING_1, blocks_1.BLOCKS.HEADING_2, blocks_1.BLOCKS.HEADING_3, blocks_1.BLOCKS.HEADING_4, blocks_1.BLOCKS.HEADING_5, blocks_1.BLOCKS.HEADING_6, blocks_1.BLOCKS.OL_LIST, blocks_1.BLOCKS.UL_LIST, blocks_1.BLOCKS.HR, blocks_1.BLOCKS.QUOTE, blocks_1.BLOCKS.EMBEDDED_ENTRY, blocks_1.BLOCKS.EMBEDDED_ASSET];\nexports.TABLE_BLOCKS = [blocks_1.BLOCKS.TABLE, blocks_1.BLOCKS.TABLE_ROW, blocks_1.BLOCKS.TABLE_CELL, blocks_1.BLOCKS.TABLE_HEADER_CELL];\n/**\n * Array of all void block types\n */\n\nexports.VOID_BLOCKS = [blocks_1.BLOCKS.HR, blocks_1.BLOCKS.EMBEDDED_ENTRY, blocks_1.BLOCKS.EMBEDDED_ASSET];\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\n\nexports.CONTAINERS = (_a = {}, _a[blocks_1.BLOCKS.OL_LIST] = [blocks_1.BLOCKS.LIST_ITEM], _a[blocks_1.BLOCKS.UL_LIST] = [blocks_1.BLOCKS.LIST_ITEM], _a[blocks_1.BLOCKS.LIST_ITEM] = exports.LIST_ITEM_BLOCKS, _a[blocks_1.BLOCKS.QUOTE] = [blocks_1.BLOCKS.PARAGRAPH], _a[blocks_1.BLOCKS.TABLE] = [blocks_1.BLOCKS.TABLE_ROW], _a[blocks_1.BLOCKS.TABLE_ROW] = [blocks_1.BLOCKS.TABLE_CELL, blocks_1.BLOCKS.TABLE_HEADER_CELL], _a[blocks_1.BLOCKS.TABLE_CELL] = [blocks_1.BLOCKS.PARAGRAPH], _a[blocks_1.BLOCKS.TABLE_HEADER_CELL] = [blocks_1.BLOCKS.PARAGRAPH], _a);\n/**\n * Array of all heading levels\n */\n\nexports.HEADINGS = [blocks_1.BLOCKS.HEADING_1, blocks_1.BLOCKS.HEADING_2, blocks_1.BLOCKS.HEADING_3, blocks_1.BLOCKS.HEADING_4, blocks_1.BLOCKS.HEADING_5, blocks_1.BLOCKS.HEADING_6];\n/**\n * Array of all block types that may contain text and inline nodes.\n */\n\nexports.TEXT_CONTAINERS = __spreadArray([blocks_1.BLOCKS.PARAGRAPH], exports.HEADINGS, true);\n/**\n * Node types before `tables` release.\n */\n\nexports.V1_NODE_TYPES = [blocks_1.BLOCKS.DOCUMENT, blocks_1.BLOCKS.PARAGRAPH, blocks_1.BLOCKS.HEADING_1, blocks_1.BLOCKS.HEADING_2, blocks_1.BLOCKS.HEADING_3, blocks_1.BLOCKS.HEADING_4, blocks_1.BLOCKS.HEADING_5, blocks_1.BLOCKS.HEADING_6, blocks_1.BLOCKS.OL_LIST, blocks_1.BLOCKS.UL_LIST, blocks_1.BLOCKS.LIST_ITEM, blocks_1.BLOCKS.HR, blocks_1.BLOCKS.QUOTE, blocks_1.BLOCKS.EMBEDDED_ENTRY, blocks_1.BLOCKS.EMBEDDED_ASSET, inlines_1.INLINES.HYPERLINK, inlines_1.INLINES.ENTRY_HYPERLINK, inlines_1.INLINES.ASSET_HYPERLINK, inlines_1.INLINES.EMBEDDED_ENTRY, 'text'];","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAkBA;;;;;;AAIaA,2BAAwC,CACnDC,gBAAOC,SAD4C,EAEnDD,gBAAOE,SAF4C,EAGnDF,gBAAOG,SAH4C,EAInDH,gBAAOI,SAJ4C,EAKnDJ,gBAAOK,SAL4C,EAMnDL,gBAAOM,SAN4C,EAOnDN,gBAAOO,SAP4C,EAQnDP,gBAAOQ,OAR4C,EASnDR,gBAAOS,OAT4C,EAUnDT,gBAAOU,EAV4C,EAWnDV,gBAAOW,KAX4C,EAYnDX,gBAAOY,cAZ4C,EAanDZ,gBAAOa,cAb4C,EAcnDb,gBAAOc,KAd4C,CAAxC;AAgCb;;;;AAGaf,2BAAwC,CACnDC,gBAAOC,SAD4C,EAEnDD,gBAAOE,SAF4C,EAGnDF,gBAAOG,SAH4C,EAInDH,gBAAOI,SAJ4C,EAKnDJ,gBAAOK,SAL4C,EAMnDL,gBAAOM,SAN4C,EAOnDN,gBAAOO,SAP4C,EAQnDP,gBAAOQ,OAR4C,EASnDR,gBAAOS,OAT4C,EAUnDT,gBAAOU,EAV4C,EAWnDV,gBAAOW,KAX4C,EAYnDX,gBAAOY,cAZ4C,EAanDZ,gBAAOa,cAb4C,CAAxC;AAgBAd,uBAAe,CAC1BC,gBAAOc,KADmB,EAE1Bd,gBAAOe,SAFmB,EAG1Bf,gBAAOgB,UAHmB,EAI1BhB,gBAAOiB,iBAJmB,CAAf;AAOb;;;;AAGalB,sBAAc,CAACC,gBAAOU,EAAR,EAAYV,gBAAOY,cAAnB,EAAmCZ,gBAAOa,cAA1C,CAAd;AAEb;;;;;;AAKad,sBAAUmB,SACrBA,GAAClB,gBAAOQ,OAAR,IAAkB,CAACR,gBAAOmB,SAAR,CADG,EAErBD,GAAClB,gBAAOS,OAAR,IAAkB,CAACT,gBAAOmB,SAAR,CAFG,EAGrBD,GAAClB,gBAAOmB,SAAR,IAAoBpB,wBAHC,EAIrBmB,GAAClB,gBAAOW,KAAR,IAAgB,CAACX,gBAAOC,SAAR,CAJK,EAKrBiB,GAAClB,gBAAOc,KAAR,IAAgB,CAACd,gBAAOe,SAAR,CALK,EAMrBG,GAAClB,gBAAOe,SAAR,IAAoB,CAACf,gBAAOgB,UAAR,EAAoBhB,gBAAOiB,iBAA3B,CANC,EAOrBC,GAAClB,gBAAOgB,UAAR,IAAqB,CAAChB,gBAAOC,SAAR,CAPA,EAQrBiB,GAAClB,gBAAOiB,iBAAR,IAA4B,CAACjB,gBAAOC,SAAR,CARP,IAAV;AAWb;;;;AAGaF,mBAAW,CACtBC,gBAAOE,SADe,EAEtBF,gBAAOG,SAFe,EAGtBH,gBAAOI,SAHe,EAItBJ,gBAAOK,SAJe,EAKtBL,gBAAOM,SALe,EAMtBN,gBAAOO,SANe,CAAX;AASb;;;;AAGaR,0BAAeqB,eAAIpB,gBAAOC,SAAX,GAAyBF,gBAAzB,EAAiC,IAAjC,CAAf;AAEb;;;;AAGaA,wBAAgB,CAC3BC,gBAAOqB,QADoB,EAE3BrB,gBAAOC,SAFoB,EAG3BD,gBAAOE,SAHoB,EAI3BF,gBAAOG,SAJoB,EAK3BH,gBAAOI,SALoB,EAM3BJ,gBAAOK,SANoB,EAO3BL,gBAAOM,SAPoB,EAQ3BN,gBAAOO,SARoB,EAS3BP,gBAAOQ,OAToB,EAU3BR,gBAAOS,OAVoB,EAW3BT,gBAAOmB,SAXoB,EAY3BnB,gBAAOU,EAZoB,EAa3BV,gBAAOW,KAboB,EAc3BX,gBAAOY,cAdoB,EAe3BZ,gBAAOa,cAfoB,EAgB3BS,kBAAQC,SAhBmB,EAiB3BD,kBAAQE,eAjBmB,EAkB3BF,kBAAQG,eAlBmB,EAmB3BH,kBAAQV,cAnBmB,EAoB3B,MApB2B,CAAhB","names":["exports","blocks_1","PARAGRAPH","HEADING_1","HEADING_2","HEADING_3","HEADING_4","HEADING_5","HEADING_6","OL_LIST","UL_LIST","HR","QUOTE","EMBEDDED_ENTRY","EMBEDDED_ASSET","TABLE","TABLE_ROW","TABLE_CELL","TABLE_HEADER_CELL","_a","LIST_ITEM","__spreadArray","DOCUMENT","inlines_1","HYPERLINK","ENTRY_HYPERLINK","ASSET_HYPERLINK"],"sources":["../src/schemaConstraints.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}