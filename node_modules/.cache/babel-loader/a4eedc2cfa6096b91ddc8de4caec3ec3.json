{"ast":null,"code":"/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\nvar ApiClient = require('../ApiClient');\n/**\n * TemplateFolders service.\n * @module api/TemplateFoldersApi\n */\n\n/**\n * Constructs a new TemplateFoldersApi. \n * @alias module:api/TemplateFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\n\n\nmodule.exports = function (apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n  this.removeWithHttpInfo = function (folderId) {\n    var postBody = null; // verify the required parameter 'folderId' is set\n\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/template-folders/{folder_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.remove = function (folderId) {\n    return this.removeWithHttpInfo(folderId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolders} and HTTP response\n   */\n\n\n  this.listWithHttpInfo = function (opts) {\n    opts = opts || {};\n    var postBody = null;\n    var pathParams = {};\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/template-folders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolders}\n   */\n\n\n  this.list = function (opts) {\n    return this.listWithHttpInfo(opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n\n\n  this.getWithHttpInfo = function (folderId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'folderId' is set\n\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/template-folders/{folder_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n\n\n  this.get = function (folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n\n\n  this.updateWithHttpInfo = function (folderId, body) {\n    var postBody = body; // verify the required parameter 'folderId' is set\n\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    } // verify the required parameter 'body' is set\n\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/template-folders/{folder_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n\n\n  this.update = function (folderId, body) {\n    return this.updateWithHttpInfo(folderId, body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n\n\n  this.createWithHttpInfo = function (body) {\n    var postBody = body; // verify the required parameter 'body' is set\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {};\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/template-folders', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n\n\n  this.create = function (body) {\n    return this.createWithHttpInfo(body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n};","map":{"version":3,"sources":["D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js"],"names":["ApiClient","require","module","exports","apiClient","instance","removeWithHttpInfo","folderId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","remove","then","response_and_data","data","listWithHttpInfo","opts","buildCollectionParam","list","getWithHttpInfo","get","updateWithHttpInfo","body","update","createWithHttpInfo","create"],"mappings":"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","sourcesContent":["/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * TemplateFolders service.\n * @module api/TemplateFoldersApi\n */\n\n/**\n * Constructs a new TemplateFoldersApi. \n * @alias module:api/TemplateFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(folderId) {\n    return this.removeWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolders} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolders}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.getWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.get = function(folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.updateWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.update = function(folderId, body) {\n    return this.updateWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}