{"ast":null,"code":"/**\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.7\n *\n * Do not edit the class manually.\n *\n */\nvar superagent = require('superagent');\n\nvar querystring = require('querystring');\n\nvar AccountExport = require('./api/AccountExportApi');\n\nvar AccountExports = require('./api/AccountExportsApi');\n\nvar ActivityFeed = require('./api/ActivityFeedApi');\n\nvar AuthorizedApps = require('./api/AuthorizedAppsApi');\n\nvar Automations = require('./api/AutomationsApi');\n\nvar BatchWebhooks = require('./api/BatchWebhooksApi');\n\nvar Batches = require('./api/BatchesApi');\n\nvar CampaignFolders = require('./api/CampaignFoldersApi');\n\nvar Campaigns = require('./api/CampaignsApi');\n\nvar ConnectedSites = require('./api/ConnectedSitesApi');\n\nvar Conversations = require('./api/ConversationsApi');\n\nvar CustomerJourneys = require('./api/CustomerJourneysApi');\n\nvar Ecommerce = require('./api/EcommerceApi');\n\nvar FacebookAds = require('./api/FacebookAdsApi');\n\nvar FileManager = require('./api/FileManagerApi');\n\nvar LandingPages = require('./api/LandingPagesApi');\n\nvar Lists = require('./api/ListsApi');\n\nvar Ping = require('./api/PingApi');\n\nvar Reporting = require('./api/ReportingApi');\n\nvar Reports = require('./api/ReportsApi');\n\nvar Root = require('./api/RootApi');\n\nvar SearchCampaigns = require('./api/SearchCampaignsApi');\n\nvar SearchMembers = require('./api/SearchMembersApi');\n\nvar TemplateFolders = require('./api/TemplateFoldersApi');\n\nvar Templates = require('./api/TemplatesApi');\n\nvar VerifiedDomains = require('./api/VerifiedDomainsApi');\n/**\n * @module ApiClient\n * @version 3.0.75\n */\n\n/**\n * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n * application to use this class directly - the *Api and model classes provide the public API for the service. The\n * contents of this file should be regarded as internal but are documented for completeness.\n * @alias module:ApiClient\n * @class\n */\n\n\nvar exports = function () {\n  /**\n   * The base URL against which to resolve every API call's (relative) path.\n   * @type {String}\n   * @default https://server.api.mailchimp.com/3.0\n   */\n  this.basePath = 'https://server.api.mailchimp.com/3.0'.replace(/\\/+$/, '');\n  /**\n   * The API configuration settings object\n   * @type {Object}\n   * @default {}\n   */\n\n  this.config = {\n    apiKey: '',\n    accessToken: '',\n    server: 'invalid-server'\n  };\n  /**\n   * The default HTTP headers to be included for all API calls.\n   * @type {Array.<String>}\n   * @default {}\n   */\n\n  this.defaultHeaders = {};\n  /**\n   * The default HTTP timeout for all API calls.\n   * @type {Number}\n   * @default 60000\n   */\n\n  this.timeout = 120000;\n  /**\n   * If set to false an additional timestamp parameter is added to all API GET calls to\n   * prevent browser caching\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.cache = true;\n  /**\n   * If set to true, the client will save the cookies from each server\n   * response, and return them in the next request.\n   * @default false\n   */\n\n  this.enableCookies = false;\n  /*\n   * Used to save and return cookies in a node.js (non-browser) setting,\n   * if this.enableCookies is set to true.\n   */\n\n  if (typeof window === 'undefined') {\n    this.agent = new superagent.agent();\n  } // API Routes\n\n\n  this.accountExport = new AccountExport(this);\n  this.accountExports = new AccountExports(this);\n  this.activityFeed = new ActivityFeed(this);\n  this.authorizedApps = new AuthorizedApps(this);\n  this.automations = new Automations(this);\n  this.batchWebhooks = new BatchWebhooks(this);\n  this.batches = new Batches(this);\n  this.campaignFolders = new CampaignFolders(this);\n  this.campaigns = new Campaigns(this);\n  this.connectedSites = new ConnectedSites(this);\n  this.conversations = new Conversations(this);\n  this.customerJourneys = new CustomerJourneys(this);\n  this.ecommerce = new Ecommerce(this);\n  this.facebookAds = new FacebookAds(this);\n  this.fileManager = new FileManager(this);\n  this.landingPages = new LandingPages(this);\n  this.lists = new Lists(this);\n  this.ping = new Ping(this);\n  this.reporting = new Reporting(this);\n  this.reports = new Reports(this);\n  this.root = new Root(this);\n  this.searchCampaigns = new SearchCampaigns(this);\n  this.searchMembers = new SearchMembers(this);\n  this.templateFolders = new TemplateFolders(this);\n  this.templates = new Templates(this);\n  this.verifiedDomains = new VerifiedDomains(this);\n};\n/**\n * Sets the API configuration settings object.\n * @param config {Object} The configuration object\n */\n\n\nexports.prototype.setConfig = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _this = this;\n\n  this.config = config;\n};\n/**\n * Returns a string representation for an actual parameter.\n * @param param The actual parameter.\n * @returns {String} The string representation of <code>param</code>.\n */\n\n\nexports.prototype.paramToString = function (param) {\n  if (param == undefined || param == null) {\n    return '';\n  }\n\n  if (param instanceof Date) {\n    return param.toJSON();\n  }\n\n  return param.toString();\n};\n/**\n * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n * NOTE: query parameters are not handled here.\n * @param {String} path The path to append to the base URL.\n * @param {Object} pathParams The parameter values to append.\n * @returns {String} The encoded path with parameter values substituted.\n */\n\n\nexports.prototype.buildUrl = function (path, pathParams) {\n  if (!path.match(/^\\//)) {\n    path = '/' + path;\n  }\n\n  var url = this.basePath + path;\n\n  var _this = this;\n\n  url = url.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n    var value;\n\n    if (pathParams.hasOwnProperty(key)) {\n      value = _this.paramToString(pathParams[key]);\n    } else {\n      value = fullMatch;\n    }\n\n    return encodeURIComponent(value);\n  }); // Define the server\n\n  if (typeof this.config.server !== 'undefined') {\n    url = url.replace('server', this.config.server);\n  }\n\n  return url;\n};\n/**\n * Checks whether the given content type represents JSON.<br>\n * JSON content type examples:<br>\n * <ul>\n * <li>application/json</li>\n * <li>application/json; charset=UTF8</li>\n * <li>APPLICATION/JSON</li>\n * </ul>\n * @param {String} contentType The MIME content type to check.\n * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n */\n\n\nexports.prototype.isJsonMime = function (contentType) {\n  return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n};\n/**\n * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n * @param {Array.<String>} contentTypes\n * @returns {String} The chosen content type, preferring JSON.\n */\n\n\nexports.prototype.jsonPreferredMime = function (contentTypes) {\n  for (var i = 0; i < contentTypes.length; i++) {\n    if (this.isJsonMime(contentTypes[i])) {\n      return contentTypes[i];\n    }\n  }\n\n  return contentTypes[0];\n};\n/**\n * Checks whether the given parameter value represents file-like content.\n * @param param The parameter to check.\n * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n */\n\n\nexports.prototype.isFileParam = function (param) {\n  // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n  if (typeof require === 'function') {\n    var fs;\n\n    try {\n      fs = require('fs');\n    } catch (err) {}\n\n    if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n      return true;\n    }\n  } // Buffer in Node.js\n\n\n  if (typeof Buffer === 'function' && param instanceof Buffer) {\n    return true;\n  } // Blob in browser\n\n\n  if (typeof Blob === 'function' && param instanceof Blob) {\n    return true;\n  } // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n\n\n  if (typeof File === 'function' && param instanceof File) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Normalizes parameter values:\n * <ul>\n * <li>remove nils</li>\n * <li>keep files and arrays</li>\n * <li>format to string with `paramToString` for other cases</li>\n * </ul>\n * @param {Object.<String, Object>} params The parameters as object properties.\n * @returns {Object.<String, Object>} normalized parameters.\n */\n\n\nexports.prototype.normalizeParams = function (params) {\n  var newParams = {};\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n      var value = params[key];\n\n      if (this.isFileParam(value) || Array.isArray(value)) {\n        newParams[key] = value;\n      } else {\n        newParams[key] = this.paramToString(value);\n      }\n    }\n  }\n\n  return newParams;\n};\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\n\n\nexports.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n/**\n * Builds a string representation of an array-type actual parameter, according to the given collection format.\n * @param {Array} param An array parameter.\n * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n */\n\nexports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n  if (param == null) {\n    return null;\n  }\n\n  switch (collectionFormat) {\n    case 'csv':\n      return param.map(this.paramToString).join(',');\n\n    case 'ssv':\n      return param.map(this.paramToString).join(' ');\n\n    case 'tsv':\n      return param.map(this.paramToString).join('\\t');\n\n    case 'pipes':\n      return param.map(this.paramToString).join('|');\n\n    case 'multi':\n      // return the array directly as SuperAgent will handle it as expected\n      return param.map(this.paramToString);\n\n    default:\n      throw new Error('Unknown collection format: ' + collectionFormat);\n  }\n};\n/**\n * Deserializes an HTTP response body into a value of the specified type.\n * @param {Object} response A SuperAgent response object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns A value of the specified type.\n */\n\n\nexports.prototype.deserialize = function deserialize(response, returnType) {\n  if (response == null || returnType == null || response.status == 204) {\n    return null;\n  } // Rely on SuperAgent for parsing response body.\n  // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n\n\n  var data = response.body;\n\n  if (data == null || typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length) {\n    // SuperAgent does not always produce a body; use the unparsed response as a fallback\n    data = response.text;\n  }\n\n  return exports.convertToType(data, returnType);\n};\n/**\n * Invokes the REST service using the supplied settings and parameters.\n * @param {String} path The base URL to invoke.\n * @param {String} httpMethod The HTTP method to use.\n * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n * @param {Object} bodyParam The value to pass as the request body.\n * @param {Array.<String>} authNames An array of authentication type names.\n * @param {Array.<String>} contentTypes An array of request MIME types.\n * @param {Array.<String>} accepts An array of acceptable response MIME types.\n * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n * constructor for a complex type.\n * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n */\n\n\nexports.prototype.callApi = function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType) {\n  var _this = this;\n\n  var url = this.buildUrl(path, pathParams);\n  var request = superagent(httpMethod, url); // Basic Authentication\n\n  if (this.config.apiKey !== undefined && this.config.apiKey !== '') {\n    request.auth('user', this.config.apiKey);\n  } // OAuth Authentication\n  else if (this.config.accessToken !== undefined && this.config.accessToken !== '') {\n    request.set({\n      'Authorization': 'Bearer ' + this.config.accessToken\n    });\n  } // set query parameters\n\n\n  if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n    queryParams['_'] = new Date().getTime();\n  }\n\n  request.query(this.normalizeParams(queryParams)); // set header parameters\n\n  request.set(this.defaultHeaders).set(this.normalizeParams(headerParams)); // set request timeout\n\n  request.timeout(this.timeout);\n  var contentType = this.jsonPreferredMime(contentTypes);\n\n  if (contentType) {\n    // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n    if (contentType != 'multipart/form-data') {\n      request.type(contentType);\n    }\n  } else if (!HeaderUtils.caseInsensitiveGet(request.header, 'content-type')) {\n    request.type('application/json');\n  }\n\n  if (contentType === 'application/x-www-form-urlencoded') {\n    request.send(querystring.stringify(this.normalizeParams(formParams)));\n  } else if (contentType == 'multipart/form-data') {\n    var _formParams = this.normalizeParams(formParams);\n\n    for (var key in _formParams) {\n      if (_formParams.hasOwnProperty(key)) {\n        if (this.isFileParam(_formParams[key])) {\n          // file field\n          request.attach(key, _formParams[key]);\n        } else {\n          request.field(key, _formParams[key]);\n        }\n      }\n    }\n  } else if (bodyParam) {\n    request.send(bodyParam);\n  }\n\n  var accept = this.jsonPreferredMime(accepts);\n\n  if (accept) {\n    request.accept(accept);\n  }\n\n  if (returnType === 'Blob') {\n    request.responseType('blob');\n  } else if (returnType === 'String') {\n    request.responseType('string');\n  } // Attach previously saved cookies, if enabled\n\n\n  if (this.enableCookies) {\n    if (typeof window === 'undefined') {\n      this.agent.attachCookies(request);\n    } else {\n      request.withCredentials();\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    request.end(function (error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        try {\n          var data = _this.deserialize(response, returnType);\n\n          if (_this.enableCookies && typeof window === 'undefined') {\n            _this.agent.saveCookies(response);\n          }\n\n          resolve({\n            data: data,\n            response: response\n          });\n        } catch (err) {\n          reject(err);\n        }\n      }\n    });\n  });\n};\n/**\n * Parses an ISO-8601 string representation of a date value.\n * @param {String} str The date value as a string.\n * @returns {Date} The parsed date object.\n */\n\n\nexports.parseDate = function (str) {\n  return new Date(str.replace(/T/i, ' '));\n};\n/**\n * Converts a value to the specified type.\n * @param {(String|Object)} data The data to convert, as a string or object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns An instance of the specified type or null or undefined if data is null or undefined.\n */\n\n\nexports.convertToType = function (data, type) {\n  if (data === null || data === undefined) return data;\n\n  switch (type) {\n    case 'Boolean':\n      return Boolean(data);\n\n    case 'Integer':\n      return parseInt(data, 10);\n\n    case 'Number':\n      return parseFloat(data);\n\n    case 'String':\n      return String(data);\n\n    case 'Date':\n      return this.parseDate(String(data));\n\n    case 'Blob':\n      return data;\n\n    default:\n      if (type === Object) {\n        // generic object, return directly\n        return data;\n      } else if (typeof type === 'function') {\n        // for model type like: User\n        return type.constructFromObject(data);\n      } else if (Array.isArray(type)) {\n        // for array type like: ['String']\n        var itemType = type[0];\n        return data.map(function (item) {\n          return exports.convertToType(item, itemType);\n        });\n      } else if (typeof type === 'object') {\n        // for plain object type like: {'String': 'Integer'}\n        var keyType, valueType;\n\n        for (var k in type) {\n          if (type.hasOwnProperty(k)) {\n            keyType = k;\n            valueType = type[k];\n            break;\n          }\n        }\n\n        var result = {};\n\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) {\n            var key = exports.convertToType(k, keyType);\n            var value = exports.convertToType(data[k], valueType);\n            result[key] = value;\n          }\n        }\n\n        return result;\n      } else {\n        // for unknown type, return the data directly\n        return data;\n      }\n\n  }\n};\n/**\n * Constructs a new map or array model from REST data.\n * @param data {Object|Array} The REST data.\n * @param obj {Object|Array} The target object or array.\n */\n\n\nexports.constructFromObject = function (data, obj, itemType) {\n  if (Array.isArray(data)) {\n    for (var i = 0; i < data.length; i++) {\n      if (data.hasOwnProperty(i)) obj[i] = exports.convertToType(data[i], itemType);\n    }\n  } else {\n    for (var k in data) {\n      if (data.hasOwnProperty(k)) obj[k] = exports.convertToType(data[k], itemType);\n    }\n  }\n};\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\n\n\nexports.instance = new exports();\nmodule.exports = exports;","map":{"version":3,"sources":["D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js"],"names":["superagent","require","querystring","AccountExport","AccountExports","ActivityFeed","AuthorizedApps","Automations","BatchWebhooks","Batches","CampaignFolders","Campaigns","ConnectedSites","Conversations","CustomerJourneys","Ecommerce","FacebookAds","FileManager","LandingPages","Lists","Ping","Reporting","Reports","Root","SearchCampaigns","SearchMembers","TemplateFolders","Templates","VerifiedDomains","exports","basePath","replace","config","apiKey","accessToken","server","defaultHeaders","timeout","cache","enableCookies","window","agent","accountExport","accountExports","activityFeed","authorizedApps","automations","batchWebhooks","batches","campaignFolders","campaigns","connectedSites","conversations","customerJourneys","ecommerce","facebookAds","fileManager","landingPages","lists","ping","reporting","reports","root","searchCampaigns","searchMembers","templateFolders","templates","verifiedDomains","prototype","setConfig","_this","paramToString","param","undefined","Date","toJSON","toString","buildUrl","path","pathParams","match","url","fullMatch","key","value","hasOwnProperty","encodeURIComponent","isJsonMime","contentType","Boolean","jsonPreferredMime","contentTypes","i","length","isFileParam","fs","err","ReadStream","Buffer","Blob","File","normalizeParams","params","newParams","Array","isArray","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","buildCollectionParam","collectionFormat","map","join","Error","deserialize","response","returnType","status","data","body","Object","keys","text","convertToType","callApi","httpMethod","queryParams","headerParams","formParams","bodyParam","authNames","accepts","request","auth","set","toUpperCase","getTime","query","type","HeaderUtils","caseInsensitiveGet","header","send","stringify","_formParams","attach","field","accept","responseType","attachCookies","withCredentials","Promise","resolve","reject","end","error","saveCookies","parseDate","str","parseInt","parseFloat","String","constructFromObject","itemType","item","keyType","valueType","k","result","obj","instance","module"],"mappings":"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","sourcesContent":["/**\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.7\n *\n * Do not edit the class manually.\n *\n */\n\nvar superagent = require('superagent');\nvar querystring = require('querystring');\n\nvar AccountExport = require('./api/AccountExportApi');\nvar AccountExports = require('./api/AccountExportsApi');\nvar ActivityFeed = require('./api/ActivityFeedApi');\nvar AuthorizedApps = require('./api/AuthorizedAppsApi');\nvar Automations = require('./api/AutomationsApi');\nvar BatchWebhooks = require('./api/BatchWebhooksApi');\nvar Batches = require('./api/BatchesApi');\nvar CampaignFolders = require('./api/CampaignFoldersApi');\nvar Campaigns = require('./api/CampaignsApi');\nvar ConnectedSites = require('./api/ConnectedSitesApi');\nvar Conversations = require('./api/ConversationsApi');\nvar CustomerJourneys = require('./api/CustomerJourneysApi');\nvar Ecommerce = require('./api/EcommerceApi');\nvar FacebookAds = require('./api/FacebookAdsApi');\nvar FileManager = require('./api/FileManagerApi');\nvar LandingPages = require('./api/LandingPagesApi');\nvar Lists = require('./api/ListsApi');\nvar Ping = require('./api/PingApi');\nvar Reporting = require('./api/ReportingApi');\nvar Reports = require('./api/ReportsApi');\nvar Root = require('./api/RootApi');\nvar SearchCampaigns = require('./api/SearchCampaignsApi');\nvar SearchMembers = require('./api/SearchMembersApi');\nvar TemplateFolders = require('./api/TemplateFoldersApi');\nvar Templates = require('./api/TemplatesApi');\nvar VerifiedDomains = require('./api/VerifiedDomainsApi');\n\n/**\n * @module ApiClient\n * @version 3.0.75\n */\n\n/**\n * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n * application to use this class directly - the *Api and model classes provide the public API for the service. The\n * contents of this file should be regarded as internal but are documented for completeness.\n * @alias module:ApiClient\n * @class\n */\nvar exports = function() {\n\n  /**\n   * The base URL against which to resolve every API call's (relative) path.\n   * @type {String}\n   * @default https://server.api.mailchimp.com/3.0\n   */\n  this.basePath = 'https://server.api.mailchimp.com/3.0'.replace(/\\/+$/, '');\n\n  /**\n   * The API configuration settings object\n   * @type {Object}\n   * @default {}\n   */\n  this.config = {\n    apiKey: '',\n    accessToken: '',\n    server: 'invalid-server'\n  };\n\n  /**\n   * The default HTTP headers to be included for all API calls.\n   * @type {Array.<String>}\n   * @default {}\n   */\n  this.defaultHeaders = {};\n  /**\n   * The default HTTP timeout for all API calls.\n   * @type {Number}\n   * @default 60000\n   */\n  this.timeout = 120000;\n\n  /**\n   * If set to false an additional timestamp parameter is added to all API GET calls to\n   * prevent browser caching\n   * @type {Boolean}\n   * @default true\n   */\n  this.cache = true;\n\n  /**\n   * If set to true, the client will save the cookies from each server\n   * response, and return them in the next request.\n   * @default false\n   */\n  this.enableCookies = false;\n\n  /*\n   * Used to save and return cookies in a node.js (non-browser) setting,\n   * if this.enableCookies is set to true.\n   */\n  if (typeof window === 'undefined') {\n    this.agent = new superagent.agent();\n  }\n\n  // API Routes\n  this.accountExport = new AccountExport(this);\n  this.accountExports = new AccountExports(this);\n  this.activityFeed = new ActivityFeed(this);\n  this.authorizedApps = new AuthorizedApps(this);\n  this.automations = new Automations(this);\n  this.batchWebhooks = new BatchWebhooks(this);\n  this.batches = new Batches(this);\n  this.campaignFolders = new CampaignFolders(this);\n  this.campaigns = new Campaigns(this);\n  this.connectedSites = new ConnectedSites(this);\n  this.conversations = new Conversations(this);\n  this.customerJourneys = new CustomerJourneys(this);\n  this.ecommerce = new Ecommerce(this);\n  this.facebookAds = new FacebookAds(this);\n  this.fileManager = new FileManager(this);\n  this.landingPages = new LandingPages(this);\n  this.lists = new Lists(this);\n  this.ping = new Ping(this);\n  this.reporting = new Reporting(this);\n  this.reports = new Reports(this);\n  this.root = new Root(this);\n  this.searchCampaigns = new SearchCampaigns(this);\n  this.searchMembers = new SearchMembers(this);\n  this.templateFolders = new TemplateFolders(this);\n  this.templates = new Templates(this);\n  this.verifiedDomains = new VerifiedDomains(this);\n};\n\n/**\n * Sets the API configuration settings object.\n * @param config {Object} The configuration object\n */\nexports.prototype.setConfig = function(config = {}) {\n  var _this = this;\n  this.config = config;\n};\n\n/**\n * Returns a string representation for an actual parameter.\n * @param param The actual parameter.\n * @returns {String} The string representation of <code>param</code>.\n */\nexports.prototype.paramToString = function(param) {\n  if (param == undefined || param == null) {\n    return '';\n  }\n  if (param instanceof Date) {\n    return param.toJSON();\n  }\n  return param.toString();\n};\n\n/**\n * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n * NOTE: query parameters are not handled here.\n * @param {String} path The path to append to the base URL.\n * @param {Object} pathParams The parameter values to append.\n * @returns {String} The encoded path with parameter values substituted.\n */\nexports.prototype.buildUrl = function(path, pathParams) {\n  if (!path.match(/^\\//)) {\n    path = '/' + path;\n  }\n  var url = this.basePath + path;\n  var _this = this;\n  url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n    var value;\n    if (pathParams.hasOwnProperty(key)) {\n      value = _this.paramToString(pathParams[key]);\n    } else {\n      value = fullMatch;\n    }\n    return encodeURIComponent(value);\n  });\n\n  // Define the server\n  if (typeof this.config.server !== 'undefined') {\n    url = url.replace('server', this.config.server);\n  }\n\n  return url;\n};\n\n/**\n * Checks whether the given content type represents JSON.<br>\n * JSON content type examples:<br>\n * <ul>\n * <li>application/json</li>\n * <li>application/json; charset=UTF8</li>\n * <li>APPLICATION/JSON</li>\n * </ul>\n * @param {String} contentType The MIME content type to check.\n * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n */\nexports.prototype.isJsonMime = function(contentType) {\n  return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n};\n\n/**\n * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n * @param {Array.<String>} contentTypes\n * @returns {String} The chosen content type, preferring JSON.\n */\nexports.prototype.jsonPreferredMime = function(contentTypes) {\n  for (var i = 0; i < contentTypes.length; i++) {\n    if (this.isJsonMime(contentTypes[i])) {\n      return contentTypes[i];\n    }\n  }\n  return contentTypes[0];\n};\n\n/**\n * Checks whether the given parameter value represents file-like content.\n * @param param The parameter to check.\n * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n */\nexports.prototype.isFileParam = function(param) {\n  // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n  if (typeof require === 'function') {\n    var fs;\n    try {\n      fs = require('fs');\n    } catch (err) {}\n    if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n      return true;\n    }\n  }\n  // Buffer in Node.js\n  if (typeof Buffer === 'function' && param instanceof Buffer) {\n    return true;\n  }\n  // Blob in browser\n  if (typeof Blob === 'function' && param instanceof Blob) {\n    return true;\n  }\n  // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n  if (typeof File === 'function' && param instanceof File) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Normalizes parameter values:\n * <ul>\n * <li>remove nils</li>\n * <li>keep files and arrays</li>\n * <li>format to string with `paramToString` for other cases</li>\n * </ul>\n * @param {Object.<String, Object>} params The parameters as object properties.\n * @returns {Object.<String, Object>} normalized parameters.\n */\nexports.prototype.normalizeParams = function(params) {\n  var newParams = {};\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n      var value = params[key];\n      if (this.isFileParam(value) || Array.isArray(value)) {\n        newParams[key] = value;\n      } else {\n        newParams[key] = this.paramToString(value);\n      }\n    }\n  }\n  return newParams;\n};\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nexports.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n\n/**\n * Builds a string representation of an array-type actual parameter, according to the given collection format.\n * @param {Array} param An array parameter.\n * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n */\nexports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n  if (param == null) {\n    return null;\n  }\n  switch (collectionFormat) {\n    case 'csv':\n      return param.map(this.paramToString).join(',');\n    case 'ssv':\n      return param.map(this.paramToString).join(' ');\n    case 'tsv':\n      return param.map(this.paramToString).join('\\t');\n    case 'pipes':\n      return param.map(this.paramToString).join('|');\n    case 'multi':\n      // return the array directly as SuperAgent will handle it as expected\n      return param.map(this.paramToString);\n    default:\n      throw new Error('Unknown collection format: ' + collectionFormat);\n  }\n};\n\n/**\n * Deserializes an HTTP response body into a value of the specified type.\n * @param {Object} response A SuperAgent response object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns A value of the specified type.\n */\nexports.prototype.deserialize = function deserialize(response, returnType) {\n  if (response == null || returnType == null || response.status == 204) {\n    return null;\n  }\n  // Rely on SuperAgent for parsing response body.\n  // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n  var data = response.body;\n  if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n    // SuperAgent does not always produce a body; use the unparsed response as a fallback\n    data = response.text;\n  }\n  return exports.convertToType(data, returnType);\n};\n\n/**\n * Invokes the REST service using the supplied settings and parameters.\n * @param {String} path The base URL to invoke.\n * @param {String} httpMethod The HTTP method to use.\n * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n * @param {Object} bodyParam The value to pass as the request body.\n * @param {Array.<String>} authNames An array of authentication type names.\n * @param {Array.<String>} contentTypes An array of request MIME types.\n * @param {Array.<String>} accepts An array of acceptable response MIME types.\n * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n * constructor for a complex type.\n * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n */\nexports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n    queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n    returnType) {\n\n  var _this = this;\n  var url = this.buildUrl(path, pathParams);\n  var request = superagent(httpMethod, url);\n\n  // Basic Authentication\n  if (this.config.apiKey !== undefined && this.config.apiKey !== '') {\n    request.auth('user', this.config.apiKey);\n  }\n\n  // OAuth Authentication\n  else if (this.config.accessToken !== undefined && this.config.accessToken !== '') {\n    request.set({'Authorization': 'Bearer ' + this.config.accessToken});\n  }\n\n  // set query parameters\n  if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n    queryParams['_'] = new Date().getTime();\n  }\n  request.query(this.normalizeParams(queryParams));\n\n  // set header parameters\n  request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n  // set request timeout\n  request.timeout(this.timeout);\n\n  var contentType = this.jsonPreferredMime(contentTypes);\n  if (contentType) {\n    // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n    if(contentType != 'multipart/form-data') {\n      request.type(contentType);\n    }\n  } else if (!HeaderUtils.caseInsensitiveGet(request.header, 'content-type')) {\n    request.type('application/json');\n  }\n\n  if (contentType === 'application/x-www-form-urlencoded') {\n    request.send(querystring.stringify(this.normalizeParams(formParams)));\n  } else if (contentType == 'multipart/form-data') {\n    var _formParams = this.normalizeParams(formParams);\n    for (var key in _formParams) {\n      if (_formParams.hasOwnProperty(key)) {\n        if (this.isFileParam(_formParams[key])) {\n          // file field\n          request.attach(key, _formParams[key]);\n        } else {\n          request.field(key, _formParams[key]);\n        }\n      }\n    }\n  } else if (bodyParam) {\n    request.send(bodyParam);\n  }\n\n  var accept = this.jsonPreferredMime(accepts);\n  if (accept) {\n    request.accept(accept);\n  }\n\n  if (returnType === 'Blob') {\n    request.responseType('blob');\n  } else if (returnType === 'String') {\n    request.responseType('string');\n  }\n\n  // Attach previously saved cookies, if enabled\n  if (this.enableCookies){\n    if (typeof window === 'undefined') {\n      this.agent.attachCookies(request);\n    }\n    else {\n      request.withCredentials();\n    }\n  }\n\n  return new Promise(function(resolve, reject) {\n    request.end(function(error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        try {\n          var data = _this.deserialize(response, returnType);\n          if (_this.enableCookies && typeof window === 'undefined'){\n            _this.agent.saveCookies(response);\n          }\n          resolve({data: data, response: response});\n        } catch (err) {\n          reject(err);\n        }\n      }\n    });\n  });\n  };\n\n/**\n * Parses an ISO-8601 string representation of a date value.\n * @param {String} str The date value as a string.\n * @returns {Date} The parsed date object.\n */\nexports.parseDate = function(str) {\n  return new Date(str.replace(/T/i, ' '));\n};\n\n/**\n * Converts a value to the specified type.\n * @param {(String|Object)} data The data to convert, as a string or object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns An instance of the specified type or null or undefined if data is null or undefined.\n */\nexports.convertToType = function(data, type) {\n  if (data === null || data === undefined)\n    return data\n\n  switch (type) {\n    case 'Boolean':\n      return Boolean(data);\n    case 'Integer':\n      return parseInt(data, 10);\n    case 'Number':\n      return parseFloat(data);\n    case 'String':\n      return String(data);\n    case 'Date':\n      return this.parseDate(String(data));\n    case 'Blob':\n      return data;\n    default:\n      if (type === Object) {\n        // generic object, return directly\n        return data;\n      } else if (typeof type === 'function') {\n        // for model type like: User\n        return type.constructFromObject(data);\n      } else if (Array.isArray(type)) {\n        // for array type like: ['String']\n        var itemType = type[0];\n        return data.map(function(item) {\n          return exports.convertToType(item, itemType);\n        });\n      } else if (typeof type === 'object') {\n        // for plain object type like: {'String': 'Integer'}\n        var keyType, valueType;\n        for (var k in type) {\n          if (type.hasOwnProperty(k)) {\n            keyType = k;\n            valueType = type[k];\n            break;\n          }\n        }\n        var result = {};\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) {\n            var key = exports.convertToType(k, keyType);\n            var value = exports.convertToType(data[k], valueType);\n            result[key] = value;\n          }\n        }\n        return result;\n      } else {\n        // for unknown type, return the data directly\n        return data;\n      }\n  }\n};\n\n/**\n * Constructs a new map or array model from REST data.\n * @param data {Object|Array} The REST data.\n * @param obj {Object|Array} The target object or array.\n */\nexports.constructFromObject = function(data, obj, itemType) {\n  if (Array.isArray(data)) {\n    for (var i = 0; i < data.length; i++) {\n      if (data.hasOwnProperty(i))\n        obj[i] = exports.convertToType(data[i], itemType);\n    }\n  } else {\n    for (var k in data) {\n      if (data.hasOwnProperty(k))\n        obj[k] = exports.convertToType(data[k], itemType);\n    }\n  }\n};\n\n  /**\n * The default API client implementation.\n * @type {module:ApiClient}\n */\nexports.instance = new exports();\n\nmodule.exports = exports;\n"]},"metadata":{},"sourceType":"script"}