{"ast":null,"code":"/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\nvar ApiClient = require('../ApiClient');\n/**\n * ConnectedSites service.\n * @module api/ConnectedSitesApi\n */\n\n/**\n * Constructs a new ConnectedSitesApi. \n * @alias module:api/ConnectedSitesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\n\n\nmodule.exports = function (apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n  this.removeWithHttpInfo = function (connectedSiteId) {\n    var postBody = null; // verify the required parameter 'connectedSiteId' is set\n\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/connected-sites/{connected_site_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.remove = function (connectedSiteId) {\n    return this.removeWithHttpInfo(connectedSiteId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSites} and HTTP response\n   */\n\n\n  this.listWithHttpInfo = function (opts) {\n    opts = opts || {};\n    var postBody = null;\n    var pathParams = {};\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/connected-sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSites}\n   */\n\n\n  this.list = function (opts) {\n    return this.listWithHttpInfo(opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n\n\n  this.getWithHttpInfo = function (connectedSiteId, opts) {\n    opts = opts || {};\n    var postBody = null; // verify the required parameter 'connectedSiteId' is set\n\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/connected-sites/{connected_site_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n\n\n  this.get = function (connectedSiteId, opts) {\n    return this.getWithHttpInfo(connectedSiteId, opts).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n\n\n  this.createWithHttpInfo = function (body) {\n    var postBody = body; // verify the required parameter 'body' is set\n\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {};\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/connected-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n\n\n  this.create = function (body) {\n    return this.createWithHttpInfo(body).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  this.verifyScriptInstallationWithHttpInfo = function (connectedSiteId) {\n    var postBody = null; // verify the required parameter 'connectedSiteId' is set\n\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    var queryParams = {};\n    var headerParams = {};\n    var formParams = {};\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n    return this.apiClient.callApi('/connected-sites/{connected_site_id}/actions/verify-script-installation', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n  };\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n\n\n  this.verifyScriptInstallation = function (connectedSiteId) {\n    return this.verifyScriptInstallationWithHttpInfo(connectedSiteId).then(function (response_and_data) {\n      return response_and_data.data;\n    });\n  };\n};","map":{"version":3,"sources":["D:/Users/Ranyo7/Programming/Atom/AcuteOwlStudio/node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js"],"names":["ApiClient","require","module","exports","apiClient","instance","removeWithHttpInfo","connectedSiteId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","remove","then","response_and_data","data","listWithHttpInfo","opts","buildCollectionParam","list","getWithHttpInfo","get","createWithHttpInfo","body","create","verifyScriptInstallationWithHttpInfo","verifyScriptInstallation"],"mappings":"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","sourcesContent":["/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.75\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = require('../ApiClient');\n\n/**\n * ConnectedSites service.\n * @module api/ConnectedSitesApi\n */\n\n/**\n * Constructs a new ConnectedSitesApi. \n * @alias module:api/ConnectedSitesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(connectedSiteId) {\n    return this.removeWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSites} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv'),\n      'count': opts['count'],\n      'offset': opts['offset']\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSites}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.getWithHttpInfo = function(connectedSiteId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.get = function(connectedSiteId, opts) {\n    return this.getWithHttpInfo(connectedSiteId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.verifyScriptInstallationWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}/actions/verify-script-installation', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.verifyScriptInstallation = function(connectedSiteId) {\n    return this.verifyScriptInstallationWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}